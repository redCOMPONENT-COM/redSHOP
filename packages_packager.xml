<?xml version="1.0" encoding="UTF-8"?>
<!-- ==================================================================  -->
<!-- redSHOP packager                                                    -->
<!-- This PHING build file generates the redSHOP packages package         -->
<!-- To use in your environment do the following steps:                  -->
<!--    Change the following variables in build.properties file          -->
<!--            (copy variables from build.properties.dist )             -->
<!--    - change the version in variable comp.version                    -->
<!--    - change the package folder path in variable package.dir         -->
<!--    - execute this PHING build file                                  -->
<!-- ==================================================================  -->

<project name="packages_packager" basedir="." default="pack">
	<!-- ============================================  -->
	<!-- Create packages folder                        -->
	<!-- ============================================  -->
	<target name="prepare">
		<if>
			<not>
				<isset property="package.dir" />
			</not>
			<then>
				<fail msg="package.dir not specified, specify package.dir in build.properties file" />
			</then>
		</if>

		<!-- Folder where the redSHOP repository is located  -->
		<property
				name="extpath"
				value="."
				override="true"/>

		<xmlproperty file="${extpath}/${extension}.xml" prefix="extensionDetails" keepRoot="false" />

		<property
				name="version"
				value="${extensionDetails.version}"
				override="true"/>

		<!-- Temp dir to create packages -->
		<property
				name="tmpdir"
				value="tmp"
				override="true"/>

		<!-- Check if the temp folder exists. If not, create it -->
		<if>
			<available file="${tmpdir}" type="dir"/>
			<then>
				<echo msg="Removing old ${tmpdir}"/>
				<delete dir="${tmpdir}"/>
			</then>
		</if>
		<echo msg="Making directory to store the temporary packages at ${tmpdir}"/>
		<mkdir dir="${tmpdir}"/>
	</target>

	<!-- ============================================  -->
	<!-- Target: build                                 -->
	<!-- ============================================  -->
	<!-- Loops through folders creating module packages -->

	<target name="build" depends="_customtasks, prepare">
		<mkdir dir="${tmpdir}" />

		<!-- Generate Site packages packages -->
		<foreach param="dirname" target="site_packages">
			<fileset dir="${extpath}/packages/">
				<type type="dir" />
				<depth max="0" min="0" />
			</fileset>
		</foreach>

		<if>
			<available file="${package.dir}/${extension}-${version}-packages" type="dir" />
			<then>
				<delete dir="${package.dir}/${extension}-${version}-packages"/>
			</then>
		</if>

		<copy todir="${package.dir}/${extension}-${version}-packages">
			<fileset dir="${tmpdir}/${extension}-${version}-packages">
				<include name="*.zip" />
			</fileset>
		</copy>
	</target>

	<target name="itemtarget">
		<mkdir dir="${tmpdir}/${extension}-${version}-packages/${dirname}_${module_version}${redshop_compatibility}/${extensionInfo.folder}"/>
		<zip
				destfile="${tmpdir}/${extension}-${version}-packages/${dirname}_${module_version}${redshop_compatibility}/${extensionInfo.folder}/${extensionInfo.zipName}"
				basedir="${extpath}/${item}">
			<fileset dir="${extpath}/${item}">
				<include name="**" />
				<exclude name=".*" />
			</fileset>
		</zip>
	</target>

	<target name="site_packages" description="Packages the extension for delivery">
		<xmlproperty file="${extpath}/packages/${dirname}/${dirname}.xml" prefix="modulemanifest" keepRoot="false" />
		<property
				name="module_version"
				value="${modulemanifest.version}"
				override="true"/>
		<!-- Todo: the following code checks compatibility with redSHOP Core version. The code works, but it can be improved with some PHING knowledge -->
		<property
				name="redshop_compatibility"
				value="${modulemanifest.redshop}"
				override="true"/>

		<if>
			<contains string="${redshop_compatibility}" substring="modulemanifest.redshop" />
			<then>
				<property
						name="redshop_compatibility"
						value=""
						override="true"/>
			</then>
			<else>
				<property
						name="redshop_compatibility"
						value="_for_redSHOP${redshop_compatibility}"
						override="true"/>
			</else>
		</if>

		<jproject file="${extpath}/packages/${dirname}/${dirname}.xml" param="item" target="itemtarget" prefix="extensionInfo" />

		<copy todir="${tmpdir}/${extension}-${version}-packages/${dirname}_${module_version}${redshop_compatibility}">
			<fileset dir="${extpath}/packages/${dirname}">
				<include name="**" />
				<exclude name=".*" />
			</fileset>
		</copy>

		<zip
				destfile="${tmpdir}/${extension}-${version}-packages/pkg_${dirname}_${module_version}${redshop_compatibility}.zip"
				basedir="${tmpdir}/${extension}-${version}-packages/${dirname}_${module_version}${redshop_compatibility}">
			<fileset dir="${tmpdir}/${extension}-${version}-packages/${dirname}_${module_version}${redshop_compatibility}">
				<include name="**" />
				<exclude name=".*" />
			</fileset>
		</zip>
	</target>

	<target name="clean-tmp">
		<delete dir="${tmpdir}"/>
	</target>

	<target name="compress-clean" depends="clean-tmp">
		<!-- needed for external cleaning and compressing -->
	</target>

	<target name="dist" depends="build, compress-clean">
		<echo msg="Packages build successful!"/>
	</target>

	<target name="pack">
		<!-- Do initialization stuff -->
		<if>
			<not>
				<available file="build.properties" type="file" />
			</not>
			<then>
				<fail msg="File not found: build.properties" />
			</then>
		</if>

		<property file="build.properties" override="true"/>

		<property
				name="extension"
				value="${comp.name}"
				override="true"/>

		<phingcall target="dist" />
	</target>

	<target name="autopack">
		<property
				name="package.dir"
				value=".dist"
				override="true"/>

		<property
				name="extension"
				value="redshop"
				override="true"/>

		<property
				name="joomla.version"
				value="3"
				override="true"/>

		<property
				name="package.delete"
				value="true"
				override="false"/>

		<if>
			<and>
				<available file="${package.dir}" type="dir"/>
				<equals arg1="${package.delete}" arg2="1" />
			</and>
			<then>
				<echo msg="Removing old autopack folder"/>
				<delete dir="${package.dir}"/>
			</then>
		</if>

		<phingcall target="dist" />
	</target>

	<target name="_customtasks">
		<adhoc-task name="jproject">
			<![CDATA[
class TestComplexTask extends Task {
	/**
	 * PhingCallTask that will be invoked w/ calleeTarget.
	 * @var PhingCallTask
	 */
	private $callee;

	/** Name of parameter to pass to callee */
	private $param;

	protected $prefix;

	/**
	 * Target to execute.
	 * @var string
	 */
	private $calleeTarget;

	private  $fileName;

	public function init()
	{
		$this->callee = $this->project->createTask("phingcall");
		$this->callee->setOwningTarget($this->getOwningTarget());
		$this->callee->setTaskName($this->getTaskName());
		$this->callee->setLocation($this->getLocation());
		$this->callee->init();
	}

	public function setFile($fileName){
		$this->fileName = $fileName;
	}

	/**
	 * This method does the work.
	 * @throws BuildException
	 * @return void
	 */
	function main() {
		if ($this->param === null) {
			throw new BuildException("You must supply a property name to set on each iteration in param");
		}

		if ($this->calleeTarget === null) {
			throw new BuildException("You must supply a target to perform");
		}

		$callee = $this->callee;
		$callee->setTarget($this->calleeTarget);
		$callee->setInheritAll(true);
		$callee->setInheritRefs(true);

		$xml = new SimpleXMLElement(file_get_contents($this->fileName));
		$folder = (string) $xml->files->attributes()->folder;

		foreach ($xml->files->file as $oneFile)
		{
			$attributesOneFile = $oneFile->attributes();
			$extension = (string) $attributesOneFile->type;

			switch ($extension)
			{
				case 'plugin':
					$extensionFolder = 'plugins';
					break;
				case 'module':
					$extensionFolder = 'modules/' . (string) $attributesOneFile->client;
					break;
				case 'library':
					$extensionFolder = 'libraries';
					break;
				case 'template':
					$extensionFolder = 'templates';
					break;
				default:
					$extensionFolder = $extension;
			}

			$filePath = $extensionFolder . '/' . (string) $attributesOneFile->group . '/' . (string) $attributesOneFile->id;
			$prop = $callee->createProperty();
			$prop->setOverride(true);
			$prop->setName($this->param);
			$prop->setValue($filePath);

			$props = array(
				'packagename' => (string) $xml->packagename,
				'version' => (string) $xml->version,
				'folder' => $folder,
				'extension' => (string) $attributesOneFile->type,
				'group' => (string) $attributesOneFile->group,
				'id' => (string) $attributesOneFile->id,
				'zipName' => (string) $oneFile,
				'extensionFolder' => $extensionFolder
			);

			foreach ($props as $name => $value)
			{
				if ($this->prefix !== null)
				{
					$name = $this->prefix . $name;
				}

				$this->project->setProperty($name, $value);
			}

			$callee->main();
		}
	}

	 /**
     * Prefix to apply to properties loaded using <code>file</code>.
     * A "." is appended to the prefix if not specified.
     * @param  string $prefix prefix string
     * @return void
     */
    public function setPrefix($prefix)
    {
        $this->prefix = $prefix;
        if (!StringHelper::endsWith(".", $prefix)) {
            $this->prefix .= ".";
        }
    }

    /**
     * @return string
     */
    public function getPrefix()
    {
        return $this->prefix;
    }

	/**
	 * @param $target
	 */
	public function setTarget($target)
	{
		$this->calleeTarget = (string) $target;
	}

	/**
	 * @param $param
	 */
	public function setParam($param)
	{
		$this->param = (string) $param;
	}
}
	]]>
		</adhoc-task>
	</target>
</project>
