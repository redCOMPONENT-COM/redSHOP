<?php
/**
 * @package     RedSHOP.Backend
 * @subpackage  Model
 *
 * @copyright   Copyright (C) 2008 - 2020 redCOMPONENT.com. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE
 */

defined('_JEXEC') or die;

/**
 * Model Manufacturers
 *
 * @package     RedSHOP.Backend
 * @subpackage  Model
 * @since       2.1.0
 */
class RedshopModelManufacturers extends RedshopModelList
{
    /**
     * Construct class
     *
     * @param   array  $config  An optional associative array of configuration settings.
     *
     * @since   2.x
     */
    public function __construct($config = array())
    {
        if (empty($config['filter_fields'])) {
            $config['filter_fields'] = array(
                'id',
                'm.id',
                'type',
                'm.type',
                'amount',
                'm.amount',
                'start_date',
                'm.start_date',
                'end_date',
                'm.end_date',
                'name',
                'm.name',
                'ordering',
                'm.ordering'
            );
        }

        parent::__construct($config);
    }

    /**
     * Method to auto-populate the model state.
     *
     * Note. Calling getState in this method will result in recursion.
     *
     * @param   string  $ordering   An optional ordering field.
     * @param   string  $direction  An optional direction (asc|desc).
     *
     * @return  void
     *
     * @since   1.6
     */
    protected function populateState($ordering = 'm.id', $direction = 'desc')
    {
        $search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');
        $this->setState('filter.search', $search);

        // List state information.
        parent::populateState($ordering, $direction);
    }

    /**
     * Method to get a store id based on model configuration state.
     *
     * This is necessary because the model is used by the component and
     * different modules that might need different sets of data or different
     * ordering requirements.
     *
     * @param   string  $id  A prefix for the store id.
     *
     * @return  string  A store id.
     *
     * @since   1.6
     */
    protected function getStoreId($id = '')
    {
        // Compile the store id.
        $id .= ':' . $this->getState('filter.search');

        return parent::getStoreId($id);
    }

    /**
     * Method to build an SQL query to load the list data.
     *
     * @return      string  An SQL query
     */
    protected function getListQuery()
    {
        // Initialize variables.
        $db    = JFactory::getDbo();
        $query = $db->getQuery(true)
            ->select('m.*')
            ->from($db->qn('#__redshop_manufacturer', 'm'));

        // Filter by search in name.
        $search = $this->getState('filter.search', '');

        if (!empty($search)) {
            $search = $db->q('%' . str_replace(' ', '%', $db->escape(trim($search), true) . '%'));
            $query->where($db->qn('m.name') . ' LIKE ' . $search);
        }

        // Add the list ordering clause.
        $orderCol  = $this->state->get('list.ordering', 'm.id');
        $orderDirn = $this->state->get('list.direction', 'asc');

        $query->order($db->escape($orderCol . ' ' . $orderDirn));

        return $query;
    }

    /**
     * @param   null  $pks
     *
     * @return bool
     * @since  3.0.2
     */
    public function delete($pks = null)
    {
        $flag = parent::delete($pks); // TODO: Change the autogenerated stub

        if ($flag) {
            \RedshopHelperUtility::getDispatcher()->trigger('onAfterManufacturerDelete', array($pks));
        }

        return $flag;
    }
}
